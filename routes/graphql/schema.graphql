scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query @middleware(checks: ["auth:api"]) {
    builds: [Build!]! @paginate(type: "paginator")
    build(hash: String! @eq): Build @find

    me: User @auth

    projects: [Project!]! @paginate(type: "paginator")
    project(id: ID! @eq): Project @find

    teams: [Team!]! @paginate(type: "paginator")
    team(id: ID! @eq): Team @find

    users: [User!]! @paginate(type: "paginator")
    user(id: ID! @eq): User @find
}

type Mutation @middleware(checks: ["auth:api"]) {
    createUser(
        name: String! @rules(apply: ["required"])
        email: String! @rules(apply: ["required", "email", "unique:users,email"])
        password: String! @rules(apply: ["required", "min:6"]) @bcrypt
    ): User @create
    updateUser(
        id: ID! @rules(apply: ["required"])
        name: String!
        email: String! @rules(apply: ["email"])
        password: String! @rules(apply: ["required", "min:6"]) @bcrypt
    ): User @update
    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User @delete
}

type Build {
    id: String!
    hash: String!
    project: Project!
    user: User!
    status: String!
    commit: String!
    completed_at: DateTime
    created_at: DateTime!
}

type Project {
    id: ID!
    team: Team!
    name: String!
    repository: String!
    created_at: DateTime!
    updated_at: DateTime
}

type Team {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime

    users: [User!]
    projects: [Project!]
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime
}
