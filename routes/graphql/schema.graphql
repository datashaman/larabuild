scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query @middleware(checks: ["auth:api"]) {
    builds: [Build!]! @paginate(builder: "App\\Queries\\Builds@resolve") @can(if: "index", model: "App\\Models\\Build")
    build(hash: String!): Build

    me: User @auth
    myTeams: [Team!]!

    project(id: ID!): Project
    projects: [Project!]! @paginate(type: "paginator") @can(if: "index", model: "App\\Models\\Project")
    projectBuilds(project_id: ID!): [Build!]

    team(id: ID!): Team
    teams: [Team!]! @paginate(type: "paginator") @can(if: "index", model: "App\\Models\\Team")
    teamProjects(team_id: ID! @eq): [Project!] @all
    teamUsers(team_id: ID!): [User!]

    user(id: ID!): User
    users: [User!]! @paginate(type: "paginator") @can(if: "index", model: "App\\Models\\User")
    userTeams(user_id: ID!): [Team!]
}

type Mutation @middleware(checks: ["auth:api"]) {
    createUser(
        name: String! @rules(apply: ["required"])
        email: String! @rules(apply: ["required", "email", "unique:users,email"])
        password: String! @rules(apply: ["required", "min:6"]) @bcrypt
    ): User @create @can(if: "create", model: "App\\Models\\User")
    updateUser(
        id: ID! @rules(apply: ["required"])
        name: String!
        email: String! @rules(apply: ["email"])
        password: String! @rules(apply: ["required", "min:6"]) @bcrypt
    ): User @update
    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User @delete
}

type Build {
    id: String!
    hash: String!
    project: Project!
    user: User!
    status: String!
    commit: String!
    completed_at: DateTime
    created_at: DateTime!
}

type Project {
    id: ID!
    team: Team!
    name: String!
    repository: String!
    created_at: DateTime!
    updated_at: DateTime

    latestBuild: Build
}

type Team {
    id: ID!
    name: String!
    created_at: DateTime!
    updated_at: DateTime

    users: [User!]
    projects: [Project!]
}

type User {
    id: ID!
    name: String!
    email: String!
    created_at: DateTime!
    updated_at: DateTime
}
