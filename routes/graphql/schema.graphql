scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query @middleware(checks: ["auth:api"]) {
    builds: [Build!]! @paginate(builder: "App\\Queries\\Builds@resolve") @can(if: "index", model: "App\\Models\\Build")
    build(id: ID!): Build

    me: User @auth
    myTeams: [Team!]!

    project(id: ID!): Project
    projects: [Project!]! @paginate(type: "paginator") @can(if: "index", model: "App\\Models\\Project")
    projectBuilds(projectId: ID!): [Build!]

    team(id: ID!): Team
    teams: [Team!]! @paginate(type: "paginator") @can(if: "index", model: "App\\Models\\Team")
    teamProjects(teamId: ID!): [Project!]
    teamUsers(teamId: ID!): [User!]

    user(id: ID!): User
    users: [User!]! @paginate(type: "paginator") @can(if: "index", model: "App\\Models\\User")
    userTeams(userId: ID!): [Team!]
}

type Mutation @middleware(checks: ["auth:api"]) {
    createTeam(
        team: TeamInput!
    ): Team @can(if: "create", model: "App\\Models\\Team")

    updateTeam(
        id: ID! @rules(apply: ["required"])
        team: TeamInput!
    ): Team

    deleteTeam(
        id: ID! @rules(apply: ["required"])
    ): Team

    addTeamUser(
        teamId: ID! @rules(apply: "required")
        userId: ID! @rules(apply: "required")
    ): User!

    removeTeamUser(
        teamId: ID! @rules(apply: "required")
        userId: ID! @rules(apply: "required")
    ): User!

    createUser(
        user: UserInput!
    ): User @create(flatten: true) @can(if: "create", model: "App\\Models\\User")

    updateUser(
        id: ID! @rules(apply: ["required"])
        user: UserInput!
    ): User

    deleteUser(
        id: ID! @rules(apply: ["required"])
    ): User

    addUserRole(
        id: ID! @rules(apply: ["required"])
        role: String! @rules(apply: ["required"])
        teamId: Int
    ): User @can(if: "addRole", model: "App\\Models\\User")

    removeUserRole(
        id: ID! @rules(apply: ["required"])
        role: String! @rules(apply: ["required"])
        teamId: Int
    ): User @can(if: "removeRole", model: "App\\Models\\User")

    createProject(
        project: CreateProjectInput!
    ): Project @can(if: "create", model: "App\\Models\\Project")

    updateProject(
        id: ID! @rules(apply: ["required"])
        project: UpdateProjectInput!
    ): Project

    deleteProject(
        id: ID! @rules(apply: ["required"])
    ): Project

    buildProject(
        id: ID! @rules(apply: ["required"])
        commit: String! @rules(apply: ["required"])
    ): Build
}

type Build @model {
    id: ID! @globalId
    project: Project!
    user: User!
    status: String!
    commit: String!
    output: String!
    completedAt: DateTime @rename(attribute: "completed_at")
    createdAt: DateTime! @rename(attribute: "created_at")
}

type Project {
    id: ID!
    team: Team!
    name: String!
    repository: String!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")

    latestBuild: Build
}

type Team {
    id: ID!
    name: String!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")

    users: [User!]
    projects: [Project!]
}

type User @model {
    id: ID! @globalId
    name: String!
    email: String!
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")

    teams: [Team!]
    userRoles: [UserRole!]
}

type UserRole {
    id: ID!
    user: User!
    role: String!
    team: Team
    createdAt: DateTime! @rename(attribute: "created_at")
    updatedAt: DateTime @rename(attribute: "updated_at")
}

input CreateProjectInput {
    teamId: ID! @rules(apply: ["required"])
    name: String! @rules(apply: ["required"])
    repository: String! @rules(apply: ["required", "url"])
    privateKey: String! @rules(apply: ["required"])
}

input UpdateProjectInput {
    name: String! @rules(apply: ["required"])
    repository: String! @rules(apply: ["required", "url"])
    privateKey: String! @rules(apply: ["required"])
}

input TeamInput {
    name: String! @rules(apply: ["required"])
}

input UserInput {
    name: String! @rules(apply: ["required"])
    email: String! @rules(apply: ["required", "email"])
    password: String! @rules(apply: ["required", "min:6"]) @bcrypt
}
